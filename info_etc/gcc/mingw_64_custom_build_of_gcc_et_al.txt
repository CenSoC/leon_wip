
Written and contributed by Leonid Zadorin at the Centre for the Study of Choice
(CenSoC), the University of Technology Sydney (UTS).

Copyright (c) 2012 The University of Technology Sydney (UTS), Australia
<www.uts.edu.au>

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.
3. All products which use or are derived from this software must display the
following acknowledgement:
  This product includes software developed by the Centre for the Study of
  Choice (CenSoC) at The University of Technology Sydney (UTS) and its
  contributors.
4. Neither the name of The University of Technology Sydney (UTS) nor the names
of the Centre for the Study of Choice (CenSoC) and contributors may be used to
endorse or promote products which use or are derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE CENTRE FOR THE STUDY OF CHOICE (CENSOC) AT THE
UNIVERSITY OF TECHNOLOGY SYDNEY (UTS) AND CONTRIBUTORS ``AS IS'' AND ANY 
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE CENTRE FOR THE STUDY OF CHOICE (CENSOC) OR
THE UNIVERSITY OF TECHNOLOGY SYDNEY (UTS) OR CONTRIBUTORS BE LIABLE FOR ANY 
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON 
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 

-------------------------------------------------------------------------------


hacks for cross-compiling on FreeBSD to 64bit windoooze

Firstly follow the native_custom_build_of_gcc_et_al.txt (to build libgomp, mpfr, mpc, et al)

Then... 

export LIBRARY_PATH=/usr/home/${USER}/cloog/installed/lib:/usr/home/${USER}/ppl/installed/lib:/usr/home/${USER}/gmp/installed/lib:/usr/home/${USER}/mpc/installed/lib:/usr/home/${USER}/mpfr/installed/lib${LIBRARY_PATH:+:}${LIBRARY_PATH}
export LD_LIBRARY_PATH=/usr/home/${USER}/cloog/installed/lib:/usr/home/${USER}/ppl/installed/lib:/usr/home/${USER}/gmp/installed/lib:/usr/home/${USER}/mpc/installed/lib:/usr/home/${USER}/mpfr/installed/lib${LD_LIBRARY_PATH:+:}${LD_LIBRARY_PATH}


1) build binutils (1st pass)

start bash

note: --enable-plugins on freebsd binutils is not working out-of-the-box (needs -ldl which is from linux-spec, freebsd has this functionality in -lc already)...

cp /usr/lib/libc.a /usr/home/${USER}/binutils/libdl.a
cp /usr/lib/libc.so /usr/home/${USER}/binutils/libdl.so
export LIBRARY_PATH=/usr/home/${USER}/binutils/${LIBRARY_PATH:+:}${LIBRARY_PATH}
export LD_LIBRARY_PATH=/usr/home/${USER}/binutils/${LD_LIBRARY_PATH:+:}${LD_LIBRARY_PATH}

# TODO: if elf-foo becomes ever appropriate, add --enable-gold=default
./configure --prefix=/usr/home/${USER}/mingw64/binutils/installed/ --with-gmp=/usr/home/${USER}/gmp/installed --with-ppl=/usr/home/${USER}/ppl/installed --with-cloog=/usr/home/${USER}/cloog/installed --with-mpfr=/usr/home/${USER}/mpfr/installed --with-mpc=/usr/home/${USER}/mpc/installed --target=x86_64-w64-mingw32 --enable-lto --enable-plugins

gmake -j 2
gmake install

export PATH=/usr/home/${USER}/mingw64/binutils/installed/bin${PATH:+:}${PATH}

2) 

install runtime headers (mingw-w64-v2.0.7)
cd mingw-w64-v2.0.7/mingw-w64-headers
./configure --host=x86_64-w64-mingw32 --prefix=/usr/home/${USER}/mingw64/gcc/installed
gmake install


cd to the gcc dir
mkdir objdir
cd objdir

# TODO: if elf-foo becomes ever appropriate, add --enable-gold=default
# currently dwarf2 (zero-overhead) exceptions are not available on 64bit windoooze platform on mingw64... so not using --disable-sjlj-exceptions, besides the GCC 4.8 should start supporting SEH on mingw(ish) targets (also "zero" overhead perhaps)... 
../gcc-4.7.2/configure --prefix=/usr/home/${USER}/mingw64/gcc/installed --program-prefix="" --disable-threads --enable-languages=c,c++,lto --enable-lto --disable-libgomp --disable-nls --with-system-zlib --with-libiconv-prefix=/usr/local  --with-gmp=/usr/home/${USER}/gmp/installed --with-ppl=/usr/home/${USER}/ppl/installed --with-cloog=/usr/home/${USER}/cloog/installed --with-mpfr=/usr/home/${USER}/mpfr/installed --with-mpc=/usr/home/${USER}/mpc/installed --with-ld=/usr/home/${USER}/mingw64/binutils/installed/bin/x86_64-w64-mingw32-ld --with-as=/usr/home/${USER}/mingw64/binutils/installed/bin/x86_64-w64-mingw32-as --disable-libgcj --target=x86_64-w64-mingw32 --disable-multilib --disable-shared --enable-plugins --enable-plugin  

gmake -j 2 all-gcc
gmake install-gcc


make runtime crt (mingw-w64-v2.0.7)
start a new lose_64 environment shell (but keep the old/current one handy, don't close it)
cd mingw-w64-v2.0.7/mingw-w64-crt
./configure --disable-multilib --host=x86_64-w64-mingw32 --prefix=/usr/home/${USER}/mingw64/gcc/installed
gmake -j 2
gmake install
exit custom lose_64 env shell

in the original (previous shell)
finish building gcc in objdir
gmake -j 2
gmake install

3) start shell in mingw64 mode and build openssl
./Configure --prefix=/usr/home/${USER}/mingw64/openssl/installed/ no-threads no-shared mingw64
gmake depend
gmake -j 2
gmake install

4) boost building

start a new bash (default) shell
./bootstrap.sh --prefix=/usr/home/${USER}/mingw64/boost/installed/ --without-icu

vim boost/config/user.hpp
define (uncomment) BOOST_DISABLE_THREADS

#define BOOST_SP_DISABLE_THREADS 
#define BOOST_ASIO_DISABLE_IOCP 
#define BOOST_NO_RTTI
#define BOOST_NO_TYPEID

then restart shell in relevant mingw64 mode,

./bjam toolset=gcc cxxflags="-std=c++11 -flto " variant=release link=static threading=single --without-thread --without-wave --without-mpi --without-python --without-graph --without-graph_parallel --without-program_options --without-signals --without-test --without-serialization --layout=versioned install


to rename versioned libs in the installed dir, can try something like this:
first to test:
find . -iname "*-mgw47*" -exec sh -c 'echo moving {} to `echo {} | sed  s/-mgw47-.*/.a/g`' \;  
and then the actual deed:
find . -iname "*-mgw47*" -exec sh -c 'mv {} `echo {} | sed  s/-mgw47-.*/.a/g`' \;

in the installed include dir would also need to move include/boost-1_52/boost (or simiral) to include/boost and rmdir the versioned (now empty) boost-1_52 dir

5) build zlib
./configure --prefix=/usr/home/${USER}/mingw64/zlib/installed/ --static
edit Makefile and delete all that relates to word starting with:
SHAREDLIB...

also add -flto to gcc flags:

gmake -j 2
gmake install

in "./x86_64-w64-mingw32/include/math.h" file may need to have double_t et al defined (when compiling in optimized mode, because then SSE mix math is in effect) and copied-over file has an issue with (__FLT_EVAL_METHOD__) being set to -1 via TARGET_FLT_EVAL_METHOD ... so something like this:
# elif (__FLT_EVAL_METHOD__ == -1)                                                                                                                             
typedef long double float_t;
typedef long double double_t;

BUT -- THIS IS VERY DANGEROUS AND SHOULD NOT BE DONE BY DEFAULT (SEE NETCPU/BSDMAKEFILE COMMENTS AS TO WHY).
